name: Deploy simple hello app to GKE

on:
  push:
    branches:
    - master

env:
  PROJECT_ID: ${{ secrets.GKE_PROJECT }}
  COSIGN_KEY: ${{ secrets.COSIGN_KEY }}
  COSIGN_PUB: ${{ secrets.COSIGN_PUB }}
  COSIGN_PASSWORD: ${{ secrets.COSIGN_PASSWORD }}
  GKE_CLUSTER: production    # TODO: update to cluster name
  GKE_ZONE: asia-east1-a	   # TODO: update to cluster zone
  DEPLOYMENT_NAME: go-hello-world # TODO: update deployment name if changed in deployment.yaml
  IMAGE_NAME: hello-k8s-summit
  IMAGE_REGISTRY: ghcr.io
jobs:
  build:
    name: Build
    runs-on: self-hosted
    permissions:
      contents: read
      packages: write
      id-token: write # Needed to create an OIDC token for keyless signing.
      actions: read # Needed to read workflow info.      
    outputs:
      image: ${{ steps.image.outputs.image }}
      digest: ${{ steps.build.outputs.digest }}

    steps:
    - name: Checkout
      uses: actions/checkout@v3

    - id: 'auth'
      uses: 'google-github-actions/auth@v0'
      with:
        credentials_json: '${{ secrets.GCP_CREDENTIALS }}'
    - id: 'jq'
      uses: sergeysova/jq-action@v2
      with:
        cmd: jq -n env
    # Setup gcloud CLI
    - name: Set up Cloud SDK
      uses: google-github-actions/setup-gcloud@v0
    # Build the Docker image

    - name: Docker configuration
      run: |-
        gcloud --quiet auth configure-docker asia-east1-docker.pkg.dev
    # Alternative option - authentication via credentials json
    - name: Set up slsa-default-generator
      id: set-slsa-generator
      shell: bash
      env:
        GITHUB_CONTEXT: "${{ toJSON(github) }}"      
      run: |-
        curl -sfLo slsa-github-generator https://github.com/slsa-framework/slsa-github-generator/releases/download/v1.2.0/slsa-generator-generic-linux-amd64
        chmod u+x ./slsa-github-generator
        echo "foo" > artifact1
        ./slsa-github-generator attest -g "slsa3.intoto.jsonl" --subjects $(sha256sum artifact1 | base64 -w0)
        cat slsa3.intoto.jsonl
    - name: Dump GitHub context
      id: github_context_step
      run: echo '${{ toJSON(github) }}'
    - name: Install Cosign
      uses: sigstore/cosign-installer@main
    - name: Check install!
      run: cosign version
    # - name: Run Skaffold pipeline as command
    #   uses: hiberbee/github-action-skaffold@latest
    #   id: build
    #   with:
    #     command: build
    #     working-directory: test
    #     skip-tests: true
    #     repository: asia-east1-docker.pkg.dev
    #     profile: cloudbuild 
    - name: Build and Push image
      id: image
      run: |
        image_name="asia-east1-docker.pkg.dev/$PROJECT_ID/image-repos/$IMAGE_NAME:$GITHUB_SHA"
        echo "::set-output name=image::${image_name}"
        echo "-----END------" >> ${{ github.workspace }}/test.txt
        cat "${{ github.workspace }}"/test.txt
        gcloud builds submit --pack=image=${image_name}
        gcloud artifacts docker images describe ${image_name} --show-provenance --format json >> ${{ github.workspace }}/provenance.json
        cat ${{ github.workspace }}/provenance.json | jq -r '.provenance_summary.provenance[0].envelope.payload' | base64 -d | jq -r .predicate >> ${{ github.workspace }}/predicate.json
        echo ${COSIGN_KEY} > ${{ github.workspace }}/cosign.key
        cosign attest --key ${{ github.workspace }}/cosign.key --predicate ${{ github.workspace }}/predicate.json image=${image_name}

    # - name: Build
    #   id: build
    #   run: |-
    #     docker build \
    #       --tag "asia-east1-docker.pkg.dev/$PROJECT_ID/image-repos/$IMAGE_NAME:$GITHUB_SHA" \
    #       --build-arg GITHUB_SHA="$GITHUB_SHA" \
    #       --build-arg GITHUB_REF="$GITHUB_REF" \
    #       .
    # # Push the Docker image to Google Artifact Registry
    # - name: Publish
    #   run: |-
    #     docker push "asia-east1-docker.pkg.dev/$PROJECT_ID/image-repos/$IMAGE_NAME:$GITHUB_SHA"
    # - name: Output image
    #   id: image
    #   run: |
    #     # NOTE: Set the image as an output because the `env` context is not
    #     # available to the inputs of a reusable workflow call.
    #     image_name="asia-east1-docker.pkg.dev/$PROJECT_ID/image-repos/$IMAGE_NAME:$GITHUB_SHA"
    #     echo "::set-output name=image::$image_name"
  # provenance:
  #   needs: [build]
  #   # TODO(https://github.com/slsa-framework/slsa-github-generator/issues/492): Use a tagged release once we have one.
  #   #uses: shawnho1018/hello-k8s-summit/.github/workflows/generator_container_slsa3.yml@master
  #   uses: slsa-framework/slsa-github-generator/.github/workflows/generator_container_slsa3.yml@main
  #   with:
  #     image: ${{ needs.build.outputs.tag }}
  #     digest: ${{ needs.build.outputs.digest }}
  #     registry-username: _json_key
  #     # TODO(https://github.com/slsa-framework/slsa-github-generator/issues/492): Remove after GA release.
  #     compile-generator: true
  #   secrets:
  #     registry-password: ${{ secrets.GCP_CREDENTIALS }}

  setup-and-deploy:
    needs: [build]
    name: Setup and Deploy
    runs-on: self-hosted

    # Add "id-token" with the intended permissions.
    permissions:
      contents: 'read'
      id-token: 'write'

    steps:
    - name: Checkout
      uses: actions/checkout@v3

    # Configure Workload Identity Federation and generate an access token.
    # - id: 'auth'
    #   name: 'Authenticate to Google Cloud'
    #   uses: 'google-github-actions/auth@v0'
    #   with:
    #     workload_identity_provider: 'projects/123456789/locations/global/workloadIdentityPools/my-pool/providers/my-provider'
    #     service_account: 'my-service-account@my-project.iam.gserviceaccount.com'

    # Alternative option - authentication via credentials json
    - id: 'auth'
      uses: 'google-github-actions/auth@v0'
      with:
        credentials_json: '${{ secrets.GCP_CREDENTIALS }}'

    # Setup gcloud CLI
    - name: Set up Cloud SDK
      uses: google-github-actions/setup-gcloud@v0

    # Get the GKE credentials so we can deploy to the cluster
    - name: Set up GKE credentials
      run: |-
        gcloud container clusters get-credentials "$GKE_CLUSTER" --zone "$GKE_ZONE"
        gcloud auth configure-docker asia-east1-docker.pkg.dev
    # Deploy sample image to the GKE cluster
    # Set up kustomize
    - name: Set up Kubectl and Kustomize
      run: |-
        curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
        chmod u+x ./kubectl
        curl -sfLo kustomize https://github.com/kubernetes-sigs/kustomize/releases/download/v3.1.0/kustomize_3.1.0_linux_amd64
        chmod u+x ./kustomize
        echo "$(pwd)" >> $GITHUB_PATH

    - name: Deploy
      run: |-
        # replacing the image name in the k8s template
        pushd kubernetes-manifests/dev
        ln -s ../../kustomize ./kustomize && ln -s ../../kubectl ./kubectl
        ./kustomize edit set image IMAGE_LOCATION=asia-east1-docker.pkg.dev/$PROJECT_ID/image-repos/$IMAGE_NAME:$GITHUB_SHA
        ./kustomize build ./ | ./kubectl apply -f -
        popd
        ./kubectl rollout status deployment/$DEPLOYMENT_NAME -n dev
        ./kubectl get services -o wide -n dev